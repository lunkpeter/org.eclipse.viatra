/*******************************************************************************
 * Copyright (c) 2004-2015, Peter Lunk, Zoltan Ujhelyi and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Peter Lunk - initial API and implementation
 *******************************************************************************/
module org.eclipse.viatra.emf.mwe2integration.example.SimpleLoopExample

//Import the necessary libraries
//Note, that the package containing the workflow needs to be imported as well (if it contains used resources)
import org.eclipse.viatra.emf.mwe2integration.*
import org.eclipse.viatra.emf.mwe2integration.mwe2impl.*
import org.eclipse.viatra.emf.mwe2integration.mwe2impl.messages.*
import org.eclipse.viatra.emf.mwe2integration.examples.resources.*

//The workflow and components are defined in the usual MWE2 fashion
Workflow {
	//Add a TransformationChain component
	//This component represents an MWE2 component that can contain numerous transformations
	component = TransformationChain {
		//**** FOR ****
		//All the basic loop types are supported here as well.
		//The number of iterations a for loop does can be explicitly specified in the MWE2 file
		step = ForLoop{
			iterations = "4"
			step = ExampleATransformationStep{}
		}
		//Or it can be dynamically calculated by a class that implements IIterationNumberProvider
		step = ForLoop{
			iterationProvider = ExampleLoopNumber{}
			step = ExampleATransformationStep{}
		}
		
		//**** FOREACH ****
		//In case of a ForEach loop, an iterable needs to be provided on which the loop can iterate through
		//This is done by an IIterableProvider
		step = ForEachLoop{
			iterable = ExampleLoopIterable{}
			step = ExampleATransformationStep{}
		}
		
		//**** While ****
		//The condition a while loop uses can be dynamically calculated by an IConditionProvider
		step = WhileLoop{
			condition = ExampleWhileCondition{}
			step = ExampleATransformationStep{}
		}
		//It is similar in case of a DoWhile loop as well
		step = DoWhileLoop{
			condition = ExampleWhileCondition{}
			step = ExampleATransformationStep{}
		}

	}
	//You can add additional regular MWE2 components here
}