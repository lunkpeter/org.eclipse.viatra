/*******************************************************************************
 * Copyright (c) 2004-2015, Peter Lunk, Zoltan Ujhelyi and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Peter Lunk - initial API and implementation
 *******************************************************************************/
module org.eclipse.viatra.emf.mwe2integration.example.MessageExample

//Import the necessary libraries
//Note, that the package containing the workflow needs to be imported as well (if it contains used resources)
import org.eclipse.viatra.emf.mwe2integration.*
import org.eclipse.viatra.emf.mwe2integration.mwe2impl.*
import org.eclipse.viatra.emf.mwe2integration.mwe2impl.messages.*
import org.eclipse.viatra.emf.mwe2integration.examples.resources.*

//The workflow and components are defined in the usual MWE2 fashion
Workflow {
	//Add a TransformationChain component
	//This component represents an MWE2 component that can contain numerous transformations
	component = TransformationChain {
		// Transformation steps can either publish to or subscribe to various message topics
		// Topic registration and subscription management is supervised by the message broker	
		step = ExampleBTransformationStep{
			//PublishTo objects wrap a topic and a message factory
			//The specified message factory is used to put a message to the specified topic
			publishing = PublishTo{ topicName = "ExampleTopicA" factory = ExampleMessageFactory{}}
		}
		step = ExampleATransformationStep{
			publishing = PublishTo{ topicName = "ExampleTopicA" factory = ExampleMessageFactory{}}
		}
		
		step = ForLoop{
			iterations = "3"
			//Subscriptions work in a similar way
			step = ExampleATransformationStep{
				// SubscribeTo objects wrap a topic and a message processor 
				// that will be used to process messages sent to the topic
				subscription = SubscribeTo{ topicName = "ExampleTopicA" processor = ExampleMessageProcessor{}}
			}
		}
		//Typically when a transformation step is executed:
		//		1. Each subscription's messages are processed using the proper processor (all of the messages)
		//		2. User defined action is performed (doExecute())
		//		3. The user can define which kind of messages are sent to which topic. (publishMessages(Operand))
		
		//In this case, as all of the published messages are processed during the first operation, 
		//the following execution sequence is expected:
		// 		B transformation executed
		// 		A transformation executed
		// 		MESSAGE B processed
		// 		MESSAGE A processed
		// 		A transformation executed
		// 		A transformation executed
		// 		A transformation executed
	}
	//You can add additional regular MWE2 components here
}